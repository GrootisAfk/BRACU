# -*- coding: utf-8 -*-
"""A5_8(bonus).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G-a9VdMAs2FO140RFDOu7gW4prCeF3oP
"""

#A5_8(bonus)
def dfs(node, visited, graph):
    visited[node] = True
    count = 1
    for neighbor in graph[node]:
        if visited[neighbor]:
            continue
        count += dfs(neighbor, visited, graph)
    return count

def find_max_component(graph):
    visited = [False] * len(graph)
    max_count = 0
    for node in range(len(graph)):
        if visited[node]:
            continue
        count = dfs(node, visited, graph)
        max_count = max(max_count, count)
    return max_count

t = int(input())
for i in range(1, t+1):
    n = int(input())
    graph = [[] for _ in range(20001)]
    for j in range(n):
        u, v = map(int, input().split())
        graph[u].append(v)
        graph[v].append(u)
    max_count = find_max_component(graph)
    print(f"Case {i}: {max_count}")