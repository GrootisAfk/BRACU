# -*- coding: utf-8 -*-
"""A5_7(bonus).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G-a9VdMAs2FO140RFDOu7gW4prCeF3oP
"""

#A5_7(bonus)

from collections import deque

def bfs(graph, start):

    queue = deque([(start, 0)])
    visited = set([start])
    farthest_node = start
    farthest_distance = 0
    while queue:
        node, distance = queue.popleft()
        if distance <= farthest_distance:
            pass
        else:
            farthest_node = node
            farthest_distance = distance
        for neighbor in graph[node]:
            if neighbor in visited:
                continue
            visited.add(neighbor)
            queue.append((neighbor, distance+1))
    return farthest_node, farthest_distance


with open('/content/drive/MyDrive/221Lab_INPUT OUTPUT/Lab_06/input7_2.txt', 'r') as f:
    n = int(f.readline())
    graph = [[] for _ in range(n+1)]
    for _ in range(n-1):
        u, v = map(int, f.readline().split())
        graph[u].append(v)
        graph[v].append(u)

farthest_node, _ = bfs(graph, 1)
farthest_node2, distance = bfs(graph, farthest_node)

with open('/content/drive/MyDrive/221Lab_INPUT OUTPUT/Lab_06/output7_2.txt', 'w') as f:
    f.write(str(farthest_node) + ' ' + str(farthest_node2))