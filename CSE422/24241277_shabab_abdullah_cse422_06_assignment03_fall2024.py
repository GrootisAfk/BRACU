# -*- coding: utf-8 -*-
"""24241277_Shabab Abdullah_CSE422_06_Assignment03_Fall2024

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14LXR2kdWJQYS8zZNQjARbSRxW6Rs4pU8
"""

#Part 1: Mortal Kombat
import math

def mn_mx(d, idx, is_mx, vals, alpha, beta):
    if d == 5:
        return vals[idx]

    if is_mx:
        best_score = -math.inf
        for i in range(2):
            child_idx = idx * 2 + i
            if child_idx < len(vals):
                score = mn_mx(d + 1, child_idx, False, vals, alpha, beta)
                best_score = max(best_score, score)
                alpha = max(alpha, best_score)
                if beta <= alpha:
                    break
        return best_score
    else:
        best_score = math.inf
        for i in range(2):
            child_idx = idx * 2 + i
            if child_idx < len(vals):
                score = mn_mx(d + 1, child_idx, True, vals, alpha, beta)
                best_score = min(best_score, score)
                beta = min(beta, best_score)
                if beta <= alpha:
                    break
        return best_score

def new_game(start_player):
    winners = []
    vals = [-1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1]

    for round_num in range(3):
        result = mn_mx(0, 0, start_player == 1, vals, -math.inf, math.inf)
        if result == -1:
            winners.append("Scorpion")
        else:
            winners.append("Sub-Zero")
        start_player = 1 - start_player

    return winners


start_player = int(input("Enter the starting player (0 for Scorpion, 1 for Sub-Zero): "))
winners = new_game(start_player)

print(f"Game Winner: {winners[-1]}")
print(f"Total Rounds Played: {len(winners)}")
for i, winner in enumerate(winners, 1):
    print(f"Winner of Round {i}: {winner}")

# Part 2: Games with Magic

import math

def mn_mx(d, n_Idx, mx_Pl, vls, alpha, beta):
    if d == 3:
        return vls[n_Idx]

    if mx_Pl:
        best = -math.inf
        for i in range(2):
            val = mn_mx(d + 1, n_Idx * 2 + i, False, vls, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)
            if beta <= alpha:
                break
        return best
    else:
        best = math.inf
        for i in range(2):
            val = mn_mx(d + 1, n_Idx * 2 + i, True, vls, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)
            if beta <= alpha:
                break
        return best

def packman_game(c):
    vls = [3, 6, 2, 3, 7, 1, 2, 0]

    mn_mx_vl_no_m = mn_mx(0, 0, True, vls, -math.inf, math.inf)

    l_val = mn_mx(1, 0, True, vls, -math.inf, math.inf)
    r_val = mn_mx(1, 1, True, vls, -math.inf, math.inf)

    l_m = l_val - c
    r_m = r_val - c

    if l_m > r_m:
        best_m = l_m
        direction = "left"
    else:
        best_m = r_m
        direction = "right"

    print(f"The value without using dark magic is {mn_mx_vl_no_m}.")

    if best_m > mn_mx_vl_no_m:
        print(f"The new value is {best_m}. Pacman goes {direction} and uses dark magic.")
    else:
        print(f"The value is {mn_mx_vl_no_m}. Pacman does not use dark magic.")

packman_game(2)
packman_game(5)